commit b2652becebd94c83b91e4555db44e608a4086fcb
Author: Charles Kerr <ckerr@github.com>
Date:   Fri Sep 13 10:26:59 2019 -0400

    refactor: apply some 'clang-tidy -fix' changes (#20172)
    
    * refactor: fix clang-tidy vector operation warnings
    
    Fix vector population performance-inefficient-vector-operation warnings
    generated by clang-tidy
    
    * refactor: fix clang-tidy emplace_back warnings
    
    In cases where a temporary is created to be passed
    to push_back(), replace it with emplace_back().
    
    Warning: modernize-use-emplace
    
    * refactor: fix clang-tidy loop iteration warnings
    
    When practical, use range-based for loops instead of C-style for loops.
    
    clang-tiny check: modernize-loop-convert
    
    * refactor: fix clang-tidy string initialize warning
    
    Remove redundant empty string initialization.
    
    clang-tidy check: readability-redundant-string-init

commit 6ff111a14188df4448bd5835dcf937e42b79c73b
Author: Thiago de Arruda <tpadilha84@gmail.com>
Date:   Wed Jun 13 04:38:31 2018 -0300

    perf: don't use JSON to send the result of `ipcRenderer.sendSync`. (#8953)
    
    * Don't use JSON to send the result of `ipcRenderer.sendSync`.
    
    - Change the return type of AtomViewHostMsg_Message_Sync from `base::string16`
      to `base::ListValue`
    - Adjust lib/browser/api/web-contents.js and /lib/renderer/api/ipc-renderer.js
      to wrap/unwrap return values to/from array, instead of
      serializing/deserializing JSON.
    
    This change can greatly improve `ipcRenderer.sendSync` calls where the return
    value contains Buffer instances, because those are converted to Array before
    being serialized to JSON(which has no efficient way of representing byte
    arrays).
    
    A simple benchmark where remote.require('fs') was used to read a 16mb file got
    at least 5x faster, not to mention it used a lot less memory.  This difference
    tends increases with larger buffers.
    
    * Don't base64 encode Buffers
    
    * Don't allocate V8ValueConverter on the heap
    
    * Replace hidden global.sandbox with NodeBindings::IsInitialized()
    
    * Refactoring: check NodeBindings::IsInitialized() in V8ValueConverter
    
    * Refactor problematic test to make it more reliable
    
    * Add tests for NaN and Infinity

commit 558ef7352d314f681215739f7458149eef5e9cd8
Author: Charles Kerr <ckerr@github.com>
Date:   Sat Mar 17 06:37:36 2018 +0900

    Better GTK+ Menu color support (#12300)
    
    * Better GTK+ Menu color support
    
     * Fix 'invisible menu' issue (#12275)
    
     * Now updates menu text color when focus changes!
    
     * Better caching of colors when system theme changes
    
     * Removed all GTK+ deprecation warnings from menubar
    
    * Don't highlight menu text on mouseover in GTK+
    
    * Fix textColor declaration scope error
    
    * Simplify FocusManager connection management a bit
    
    * Make the linter happy
    
    * Decouple MenuBar view recoloring from rebuilding
    
    This way we don't need to rebuild the subview each time a recolor
    is needed, e.g. when window focus changes or the system theme changes
    
    * Don't iterate child views if we don't need to
    
    * Move variable declaration outside of a loop
    
    * More efficient iteration of MenuBar children
    
    * Cleaner MenuButton bounds testing
    
    * Fix oops
    
    * Add a nullptr check in MenuBar::GetItemCount()
    
    * Simplify iteration in MenuBar::RebuildChildren()
    
    * Make the linter happy
    
    * Fix signed-unsigned comparison
    
    * Remove declarations of nonexistent methods
    
    * Make SubmenuButton accessor const
    
    * Cleaner accelerator iteration
    
    * Windows fixes

commit 53229e3d6c544c68137497ed09a074250c1af0fc
Author: Cheng Zhao <zcbenz@gmail.com>
Date:   Mon Feb 26 23:24:00 2018 +0900

    Fix network delegate race condition (#12044)
    
    * Fix race condition when getting network delegate
    
    * Remove the evil URLRequestContextGetter::network_delegate
    
    * Move the arguments instead of const referrencing
    
    Safer and more efficient.
commit 633e5d850374694cbe788216dafb22cee788ebc1
Author: overkill <22098433+0verk1ll@users.noreply.github.com>
Date:   Sun Sep 13 22:43:16 2020 -0400

    chore: change `== None` to `is None` (#25202)
    
    According to LGTM, this change will improve code efficiency.
    https://lgtm.com/rules/7900090/

diff --git a/script/verify-chromedriver.py b/script/verify-chromedriver.py
index 5b7c23791..d486971c0 100644
--- a/script/verify-chromedriver.py
+++ b/script/verify-chromedriver.py
@@ -35,7 +35,7 @@ def main():
   match = re.search(
     '^Starting ChromeDriver [0-9]+.[0-9]+.[0-9]+.[0-9]+ .* on port [0-9]+$', output)
 
-  if match == None:
+  if match is None:
     returncode = 1
 
   if returncode == 0:
